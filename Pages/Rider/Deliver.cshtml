@page
@model FoodDelivery.Pages.Rider.DeliverModel
@{
    ViewData["Title"] = "Deliver Order";
}

<html>
    <head>
        <link href="https://api.mapbox.com/mapbox-gl-js/v2.3.0/mapbox-gl.css" rel="stylesheet">
        <link href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-directions/v4.1.0/mapbox-gl-directions.css" rel="stylesheet" type="text/css">

        <style>
            #map { width: 100%; height: 600px }
        </style>
    </head>
    <body>
        <h4>@ViewData["Title"]</h4>
        <p>In this page you can <strong>get directions</strong> to your destination an mark the order as <strong>delivered</strong>.</p>

        <partial name="_StatusMessage" model="Model.StatusMessage" />

        <form asp-page="Deliver">
            <div class="form-group">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <div class="form-group">
                    <label asp-for="Input.OrderId"></label>
                    <input asp-for="Input.OrderId" class="form-control" readonly />
                    <span asp-validation-for="Input.OrderId" class="text-danger"></span>
                </div>
                <button type="submit" class="btn btn-primary">Mark as Delivered</button>
            </div>
        </form>

        <hr />

        <h5>Map</h5>
        <p>The delivery address is <strong>@Model.DeliveryAddress</strong>. You can follow the following directions to get to your destination.</p>
        <div id="map"></div>
    </body>
</html>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script src="https://api.mapbox.com/mapbox-gl-js/v2.3.0/mapbox-gl.js"></script>
    <script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-directions/v4.1.0/mapbox-gl-directions.js"></script>

    <script>
        // Access Token MapBox.
        var accessToken = "pk.eyJ1IjoibWF0dGVvLXBhbGxhbnphIiwiYSI6ImNreWxhdXl1djM0ZWoycHBiNGZzZTlua2UifQ.JaWFbpGuWR1mz0LM0ulAwQ";

        // Geolocalizzo l'utente per definire la posizione iniziale della mappa.
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(showMap);
        } else {
            alert("Geolocation is not supported by this browser.");
        }

        function showMap(position) {
            mapboxgl.accessToken = accessToken;

            var lng = position.coords.longitude;
            var lat = position.coords.latitude;  

            var map = new mapboxgl.Map({
                container: 'map',
                style: 'mapbox://styles/mapbox/streets-v11',
                center: [lng, lat],
                zoom: 13
            });

            // Aggiungo il controllo per il calcolo del percorso.
            var directions = new MapboxDirections({
                accessToken: mapboxgl.accessToken,
                unit: 'metric',
                // Profilo di default per il calcolo del percorso.
                profile: 'mapbox/cycling'
            });

            map.addControl(directions, 'top-left');

            // Aggiungo i controlli di zoom e rotazione della mappa.
            map.addControl(new mapboxgl.NavigationControl());

            // Aggiungo il controllo di geolocalizzazione della posizione alla mappa.
            var geolocate = new mapboxgl.GeolocateControl({
                positionOptions: {
                    enableHighAccuracy: true
                },
                trackUserLocation: true
            });

            map.addControl(geolocate);

            map.on('load', function() {
                // Posiziono la mappa dove si trova l'utente e evidenzio la posizione.
                geolocate.trigger();

                // Di default l'origin del percorso è la posizione dell'utente.
                directions.setOrigin([lng, lat]);

                // Simulo la scelta dell'indirizzo di destinazione del percorso.
                directions.setDestination("@Model.DeliveryAddress");
            });
        }
    </script>
}
